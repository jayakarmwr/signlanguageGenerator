export function animateA(hand, scene) {
    const fingers = {};
    hand.getChildTransformNodes().forEach(node => {
        const name = node.name.toLowerCase();
        if (name.includes("thumb")) fingers.thumb = node;
        if (name.includes("index")) fingers.index = node;
        if (name.includes("middle")) fingers.middle = node;
        if (name.includes("ring")) fingers.ring = node;
        if (name.includes("pinky")) fingers.pinky = node;
    });

    function animateFinger(finger, rotationX, rotationZ = 0) {
        if (!finger) return;

        // Reset rotation quaternion to allow for Euler rotations
        finger.rotationQuaternion = null;

        // Create animation for X rotation
        const animX = new BABYLON.Animation("animX", "rotation.x", 30, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);
        animX.setKeys([{ frame: 0, value: finger.rotation.x }, { frame: 10, value: rotationX }]);

        // Create animation for Z rotation
        const animZ = new BABYLON.Animation("animZ", "rotation.z", 30, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);
        animZ.setKeys([{ frame: 0, value: finger.rotation.z }, { frame: 10, value: rotationZ }]);

        // Assign animations to the finger and begin animation
        finger.animations = [animX, animZ];
        scene.beginAnimation(finger, 0, 10, false);
    }

    // Close all fingers for 'A' with more aggressive bending
    animateFinger(fingers.index, 2.5);   // Increased to fully close index finger
    animateFinger(fingers.middle, 2.5);   // Increased to fully close middle finger
    animateFinger(fingers.ring, 2.5);     // Increased to fully close ring finger
    animateFinger(fingers.pinky, 2.5);    // Increased to fully close pinky finger
    animateFinger(fingers.thumb, 1.0);     // Adjusted thumb closure angle
}
































// A.js
export function animateA(hand, scene) {
    const fingers = {
        thumb: [],
        index: [],
        middle: [],
        ring: [],
        pinky: []
    };

    // Collect all relevant finger bones
    hand.getChildTransformNodes().forEach(node => {
        const name = node.name.toLowerCase();
        if (name.includes("thumb")) {
            if(name.includes(".0") || name.includes(".1") || name.includes(".2"))
            fingers.thumb.push(node);
        }
        if (name.includes("index")) {
             if(name.includes(".0") || name.includes(".1") || name.includes(".2"))
            fingers.index.push(node);
        }
        if (name.includes("middle")) {
             if(name.includes(".0") || name.includes(".1") || name.includes(".2"))
            fingers.middle.push(node);
        }
        if (name.includes("ring")) {
             if(name.includes(".0") || name.includes(".1") || name.includes(".2"))
            fingers.ring.push(node);
        }
        if (name.includes("pinky")) {
             if(name.includes(".0") || name.includes(".1") || name.includes(".2"))
            fingers.pinky.push(node);
        }
    });

    function animateBone(bone, rotationX, rotationY = 0, rotationZ = 0) {
        if (!bone) return;

        // Reset rotation quaternion to allow for Euler rotations
        bone.rotationQuaternion = null;

        // Log initial rotations for debugging
        console.log("Bone:", bone.name, "Initial Rotation:", bone.rotation.x, bone.rotation.y, bone.rotation.z);

        // Create animation for X rotation
        const animX = new BABYLON.Animation("animX", "rotation.x", 30, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);
        animX.setKeys([{ frame: 0, value: bone.rotation.x }, { frame: 10, value: rotationX }]);

        // Create animation for Z rotation
        const animZ = new BABYLON.Animation("animZ", "rotation.z", 30, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);
        animZ.setKeys([{ frame: 0, value: bone.rotation.z }, { frame: 10, value: rotationZ }]);

        // Create animation for Y rotation
        const animY = new BABYLON.Animation("animY", "rotation.y", 30, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);
        animY.setKeys([{ frame: 0, value: bone.rotation.y }, { frame: 10, value: rotationY }]);

        // Assign animations to the bone and begin animation
        bone.animations = [animX, animZ, animY];
        scene.beginAnimation(bone, 0, 10, false);
    }

    // Apply the 'A' gesture (closed fist)
    // Adjust these values based on your skeleton's bone structure

    // Animate all finger bones
    fingers.index.forEach(bone => animateBone(bone, 0.3, 0, 0));
    fingers.middle.forEach(bone => animateBone(bone, 0.4, 0, 0));
    fingers.ring.forEach(bone => animateBone(bone, 0.4, 0, 0));
    fingers.pinky.forEach(bone => animateBone(bone, 0.5, 0, 0));

    // Animate all thumb bones
    fingers.thumb.forEach(bone => animateBone(bone, 0, 0.6, 0));
}
